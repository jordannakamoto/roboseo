
// Old Method of getting page names
/**        // > Third scan: Gathering page names matching the URLs
        // ..
        // const gridDataResponse2 = await sheets.spreadsheets.values.get({
        //     spreadsheetId: data.spreadsheetId,
        //     range: `'${data.titleSheet}'!A1:Z`, // Adjust the range to include all columns for header identification
        // });

        // const rows2 = gridDataResponse2.data.values;
        // rowIndex = 0;
        // let pageIndex;
        // let urlIndex;

        // // Locate the 'page name' header row and set column indices
        // while (rowIndex < rows2.length) {
        //     const row2 = rows2[rowIndex].map(header => header.toLowerCase());
        //     pageIndex = row2.indexOf('page name');
        //     urlIndex = row2.indexOf('url');

        //     if (pageIndex !== -1 && urlIndex !== -1) {
        //         headerRow = row2;
        //         break;
        //     }
        //     rowIndex++;
        // }

        // // ERROR CHECK
        // if (!headerRow) {
        //     throw new Error('Required columns not found');
        // }
        // if (pageIndex === -1 || urlIndex === -1) {
        //     throw new Error('Required columns not found');
        // }

        // // Collect page names starting from the row after the header row
        // const pageNames = [];
        // for (let i = rowIndex + 1; i < rows2.length; i++) {
        //     const row = rows2[i];
        //     pageNames.push(row[pageIndex] || ''); // Assuming page names are in the identified column
        // }

        // // Combine the page names and URLs into the `webpages` array
        // if (uniqueValues.length !== pageNames.length) {
        //     console.log("URLS:");
        //     console.log(uniqueValues);
        //     console.log("PAGE NAMES:");
        //     console.log(pageNames);
        //     throw new Error('Mismatch between the number of URLs and page names.');
        // }
*/